// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wenet.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_wenet_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_wenet_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_wenet_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_wenet_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_wenet_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_wenet_2eproto_metadata_getter(int index);
namespace wenet {
class Request;
struct RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Request_DecodeConfig;
struct Request_DecodeConfigDefaultTypeInternal;
extern Request_DecodeConfigDefaultTypeInternal _Request_DecodeConfig_default_instance_;
class Response;
struct ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class Response_OneBest;
struct Response_OneBestDefaultTypeInternal;
extern Response_OneBestDefaultTypeInternal _Response_OneBest_default_instance_;
class Response_OnePiece;
struct Response_OnePieceDefaultTypeInternal;
extern Response_OnePieceDefaultTypeInternal _Response_OnePiece_default_instance_;
}  // namespace wenet
PROTOBUF_NAMESPACE_OPEN
template<> ::wenet::Request* Arena::CreateMaybeMessage<::wenet::Request>(Arena*);
template<> ::wenet::Request_DecodeConfig* Arena::CreateMaybeMessage<::wenet::Request_DecodeConfig>(Arena*);
template<> ::wenet::Response* Arena::CreateMaybeMessage<::wenet::Response>(Arena*);
template<> ::wenet::Response_OneBest* Arena::CreateMaybeMessage<::wenet::Response_OneBest>(Arena*);
template<> ::wenet::Response_OnePiece* Arena::CreateMaybeMessage<::wenet::Response_OnePiece>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace wenet {

enum Response_Status : int {
  Response_Status_ok = 0,
  Response_Status_failed = 1,
  Response_Status_Response_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Response_Status_Response_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Response_Status_IsValid(int value);
constexpr Response_Status Response_Status_Status_MIN = Response_Status_ok;
constexpr Response_Status Response_Status_Status_MAX = Response_Status_failed;
constexpr int Response_Status_Status_ARRAYSIZE = Response_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Response_Status_descriptor();
template<typename T>
inline const std::string& Response_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Response_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Response_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Response_Status_descriptor(), enum_t_value);
}
inline bool Response_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Response_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Response_Status>(
    Response_Status_descriptor(), name, value);
}
enum Response_Type : int {
  Response_Type_server_ready = 0,
  Response_Type_partial_result = 1,
  Response_Type_final_result = 2,
  Response_Type_speech_end = 3,
  Response_Type_Response_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Response_Type_Response_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Response_Type_IsValid(int value);
constexpr Response_Type Response_Type_Type_MIN = Response_Type_server_ready;
constexpr Response_Type Response_Type_Type_MAX = Response_Type_speech_end;
constexpr int Response_Type_Type_ARRAYSIZE = Response_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Response_Type_descriptor();
template<typename T>
inline const std::string& Response_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Response_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Response_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Response_Type_descriptor(), enum_t_value);
}
inline bool Response_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Response_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Response_Type>(
    Response_Type_descriptor(), name, value);
}
// ===================================================================

class Request_DecodeConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wenet.Request.DecodeConfig) */ {
 public:
  inline Request_DecodeConfig() : Request_DecodeConfig(nullptr) {}
  virtual ~Request_DecodeConfig();
  explicit constexpr Request_DecodeConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Request_DecodeConfig(const Request_DecodeConfig& from);
  Request_DecodeConfig(Request_DecodeConfig&& from) noexcept
    : Request_DecodeConfig() {
    *this = ::std::move(from);
  }

  inline Request_DecodeConfig& operator=(const Request_DecodeConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request_DecodeConfig& operator=(Request_DecodeConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Request_DecodeConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const Request_DecodeConfig* internal_default_instance() {
    return reinterpret_cast<const Request_DecodeConfig*>(
               &_Request_DecodeConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Request_DecodeConfig& a, Request_DecodeConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(Request_DecodeConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request_DecodeConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request_DecodeConfig* New() const final {
    return CreateMaybeMessage<Request_DecodeConfig>(nullptr);
  }

  Request_DecodeConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request_DecodeConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request_DecodeConfig& from);
  void MergeFrom(const Request_DecodeConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request_DecodeConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wenet.Request.DecodeConfig";
  }
  protected:
  explicit Request_DecodeConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_wenet_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNbestConfigFieldNumber = 1,
    kContinuousDecodingConfigFieldNumber = 2,
  };
  // int32 nbest_config = 1;
  void clear_nbest_config();
  ::PROTOBUF_NAMESPACE_ID::int32 nbest_config() const;
  void set_nbest_config(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nbest_config() const;
  void _internal_set_nbest_config(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool continuous_decoding_config = 2;
  void clear_continuous_decoding_config();
  bool continuous_decoding_config() const;
  void set_continuous_decoding_config(bool value);
  private:
  bool _internal_continuous_decoding_config() const;
  void _internal_set_continuous_decoding_config(bool value);
  public:

  // @@protoc_insertion_point(class_scope:wenet.Request.DecodeConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 nbest_config_;
  bool continuous_decoding_config_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_wenet_2eproto;
};
// -------------------------------------------------------------------

class Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wenet.Request) */ {
 public:
  inline Request() : Request(nullptr) {}
  virtual ~Request();
  explicit constexpr Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Request& default_instance() {
    return *internal_default_instance();
  }
  enum RequestPayloadCase {
    kDecodeConfig = 1,
    kAudioData = 2,
    REQUESTPAYLOAD_NOT_SET = 0,
  };

  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(nullptr);
  }

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wenet.Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_wenet_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef Request_DecodeConfig DecodeConfig;

  // accessors -------------------------------------------------------

  enum : int {
    kDecodeConfigFieldNumber = 1,
    kAudioDataFieldNumber = 2,
  };
  // .wenet.Request.DecodeConfig decode_config = 1;
  bool has_decode_config() const;
  private:
  bool _internal_has_decode_config() const;
  public:
  void clear_decode_config();
  const ::wenet::Request_DecodeConfig& decode_config() const;
  ::wenet::Request_DecodeConfig* release_decode_config();
  ::wenet::Request_DecodeConfig* mutable_decode_config();
  void set_allocated_decode_config(::wenet::Request_DecodeConfig* decode_config);
  private:
  const ::wenet::Request_DecodeConfig& _internal_decode_config() const;
  ::wenet::Request_DecodeConfig* _internal_mutable_decode_config();
  public:
  void unsafe_arena_set_allocated_decode_config(
      ::wenet::Request_DecodeConfig* decode_config);
  ::wenet::Request_DecodeConfig* unsafe_arena_release_decode_config();

  // bytes audio_data = 2;
  bool has_audio_data() const;
  private:
  bool _internal_has_audio_data() const;
  public:
  void clear_audio_data();
  const std::string& audio_data() const;
  void set_audio_data(const std::string& value);
  void set_audio_data(std::string&& value);
  void set_audio_data(const char* value);
  void set_audio_data(const void* value, size_t size);
  std::string* mutable_audio_data();
  std::string* release_audio_data();
  void set_allocated_audio_data(std::string* audio_data);
  private:
  const std::string& _internal_audio_data() const;
  void _internal_set_audio_data(const std::string& value);
  std::string* _internal_mutable_audio_data();
  public:

  void clear_RequestPayload();
  RequestPayloadCase RequestPayload_case() const;
  // @@protoc_insertion_point(class_scope:wenet.Request)
 private:
  class _Internal;
  void set_has_decode_config();
  void set_has_audio_data();

  inline bool has_RequestPayload() const;
  inline void clear_has_RequestPayload();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union RequestPayloadUnion {
    constexpr RequestPayloadUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::wenet::Request_DecodeConfig* decode_config_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr audio_data_;
  } RequestPayload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_wenet_2eproto;
};
// -------------------------------------------------------------------

class Response_OneBest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wenet.Response.OneBest) */ {
 public:
  inline Response_OneBest() : Response_OneBest(nullptr) {}
  virtual ~Response_OneBest();
  explicit constexpr Response_OneBest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Response_OneBest(const Response_OneBest& from);
  Response_OneBest(Response_OneBest&& from) noexcept
    : Response_OneBest() {
    *this = ::std::move(from);
  }

  inline Response_OneBest& operator=(const Response_OneBest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response_OneBest& operator=(Response_OneBest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Response_OneBest& default_instance() {
    return *internal_default_instance();
  }
  static inline const Response_OneBest* internal_default_instance() {
    return reinterpret_cast<const Response_OneBest*>(
               &_Response_OneBest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Response_OneBest& a, Response_OneBest& b) {
    a.Swap(&b);
  }
  inline void Swap(Response_OneBest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response_OneBest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response_OneBest* New() const final {
    return CreateMaybeMessage<Response_OneBest>(nullptr);
  }

  Response_OneBest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response_OneBest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response_OneBest& from);
  void MergeFrom(const Response_OneBest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response_OneBest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wenet.Response.OneBest";
  }
  protected:
  explicit Response_OneBest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_wenet_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWordpiecesFieldNumber = 2,
    kSentenceFieldNumber = 1,
  };
  // repeated .wenet.Response.OnePiece wordpieces = 2;
  int wordpieces_size() const;
  private:
  int _internal_wordpieces_size() const;
  public:
  void clear_wordpieces();
  ::wenet::Response_OnePiece* mutable_wordpieces(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wenet::Response_OnePiece >*
      mutable_wordpieces();
  private:
  const ::wenet::Response_OnePiece& _internal_wordpieces(int index) const;
  ::wenet::Response_OnePiece* _internal_add_wordpieces();
  public:
  const ::wenet::Response_OnePiece& wordpieces(int index) const;
  ::wenet::Response_OnePiece* add_wordpieces();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wenet::Response_OnePiece >&
      wordpieces() const;

  // string sentence = 1;
  void clear_sentence();
  const std::string& sentence() const;
  void set_sentence(const std::string& value);
  void set_sentence(std::string&& value);
  void set_sentence(const char* value);
  void set_sentence(const char* value, size_t size);
  std::string* mutable_sentence();
  std::string* release_sentence();
  void set_allocated_sentence(std::string* sentence);
  private:
  const std::string& _internal_sentence() const;
  void _internal_set_sentence(const std::string& value);
  std::string* _internal_mutable_sentence();
  public:

  // @@protoc_insertion_point(class_scope:wenet.Response.OneBest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wenet::Response_OnePiece > wordpieces_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sentence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_wenet_2eproto;
};
// -------------------------------------------------------------------

class Response_OnePiece PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wenet.Response.OnePiece) */ {
 public:
  inline Response_OnePiece() : Response_OnePiece(nullptr) {}
  virtual ~Response_OnePiece();
  explicit constexpr Response_OnePiece(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Response_OnePiece(const Response_OnePiece& from);
  Response_OnePiece(Response_OnePiece&& from) noexcept
    : Response_OnePiece() {
    *this = ::std::move(from);
  }

  inline Response_OnePiece& operator=(const Response_OnePiece& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response_OnePiece& operator=(Response_OnePiece&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Response_OnePiece& default_instance() {
    return *internal_default_instance();
  }
  static inline const Response_OnePiece* internal_default_instance() {
    return reinterpret_cast<const Response_OnePiece*>(
               &_Response_OnePiece_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Response_OnePiece& a, Response_OnePiece& b) {
    a.Swap(&b);
  }
  inline void Swap(Response_OnePiece* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response_OnePiece* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response_OnePiece* New() const final {
    return CreateMaybeMessage<Response_OnePiece>(nullptr);
  }

  Response_OnePiece* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response_OnePiece>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response_OnePiece& from);
  void MergeFrom(const Response_OnePiece& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response_OnePiece* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wenet.Response.OnePiece";
  }
  protected:
  explicit Response_OnePiece(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_wenet_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWordFieldNumber = 1,
    kStartFieldNumber = 2,
    kEndFieldNumber = 3,
  };
  // string word = 1;
  void clear_word();
  const std::string& word() const;
  void set_word(const std::string& value);
  void set_word(std::string&& value);
  void set_word(const char* value);
  void set_word(const char* value, size_t size);
  std::string* mutable_word();
  std::string* release_word();
  void set_allocated_word(std::string* word);
  private:
  const std::string& _internal_word() const;
  void _internal_set_word(const std::string& value);
  std::string* _internal_mutable_word();
  public:

  // int32 start = 2;
  void clear_start();
  ::PROTOBUF_NAMESPACE_ID::int32 start() const;
  void set_start(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_start() const;
  void _internal_set_start(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 end = 3;
  void clear_end();
  ::PROTOBUF_NAMESPACE_ID::int32 end() const;
  void set_end(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_end() const;
  void _internal_set_end(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:wenet.Response.OnePiece)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr word_;
  ::PROTOBUF_NAMESPACE_ID::int32 start_;
  ::PROTOBUF_NAMESPACE_ID::int32 end_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_wenet_2eproto;
};
// -------------------------------------------------------------------

class Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wenet.Response) */ {
 public:
  inline Response() : Response(nullptr) {}
  virtual ~Response();
  explicit constexpr Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return CreateMaybeMessage<Response>(nullptr);
  }

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wenet.Response";
  }
  protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_wenet_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef Response_OneBest OneBest;
  typedef Response_OnePiece OnePiece;

  typedef Response_Status Status;
  static constexpr Status ok =
    Response_Status_ok;
  static constexpr Status failed =
    Response_Status_failed;
  static inline bool Status_IsValid(int value) {
    return Response_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    Response_Status_Status_MIN;
  static constexpr Status Status_MAX =
    Response_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    Response_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return Response_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return Response_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return Response_Status_Parse(name, value);
  }

  typedef Response_Type Type;
  static constexpr Type server_ready =
    Response_Type_server_ready;
  static constexpr Type partial_result =
    Response_Type_partial_result;
  static constexpr Type final_result =
    Response_Type_final_result;
  static constexpr Type speech_end =
    Response_Type_speech_end;
  static inline bool Type_IsValid(int value) {
    return Response_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Response_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Response_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Response_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Response_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Response_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return Response_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNbestFieldNumber = 3,
    kStatusFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // repeated .wenet.Response.OneBest nbest = 3;
  int nbest_size() const;
  private:
  int _internal_nbest_size() const;
  public:
  void clear_nbest();
  ::wenet::Response_OneBest* mutable_nbest(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wenet::Response_OneBest >*
      mutable_nbest();
  private:
  const ::wenet::Response_OneBest& _internal_nbest(int index) const;
  ::wenet::Response_OneBest* _internal_add_nbest();
  public:
  const ::wenet::Response_OneBest& nbest(int index) const;
  ::wenet::Response_OneBest* add_nbest();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wenet::Response_OneBest >&
      nbest() const;

  // .wenet.Response.Status status = 1;
  void clear_status();
  ::wenet::Response_Status status() const;
  void set_status(::wenet::Response_Status value);
  private:
  ::wenet::Response_Status _internal_status() const;
  void _internal_set_status(::wenet::Response_Status value);
  public:

  // .wenet.Response.Type type = 2;
  void clear_type();
  ::wenet::Response_Type type() const;
  void set_type(::wenet::Response_Type value);
  private:
  ::wenet::Response_Type _internal_type() const;
  void _internal_set_type(::wenet::Response_Type value);
  public:

  // @@protoc_insertion_point(class_scope:wenet.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wenet::Response_OneBest > nbest_;
  int status_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_wenet_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Request_DecodeConfig

// int32 nbest_config = 1;
inline void Request_DecodeConfig::clear_nbest_config() {
  nbest_config_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Request_DecodeConfig::_internal_nbest_config() const {
  return nbest_config_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Request_DecodeConfig::nbest_config() const {
  // @@protoc_insertion_point(field_get:wenet.Request.DecodeConfig.nbest_config)
  return _internal_nbest_config();
}
inline void Request_DecodeConfig::_internal_set_nbest_config(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nbest_config_ = value;
}
inline void Request_DecodeConfig::set_nbest_config(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nbest_config(value);
  // @@protoc_insertion_point(field_set:wenet.Request.DecodeConfig.nbest_config)
}

// bool continuous_decoding_config = 2;
inline void Request_DecodeConfig::clear_continuous_decoding_config() {
  continuous_decoding_config_ = false;
}
inline bool Request_DecodeConfig::_internal_continuous_decoding_config() const {
  return continuous_decoding_config_;
}
inline bool Request_DecodeConfig::continuous_decoding_config() const {
  // @@protoc_insertion_point(field_get:wenet.Request.DecodeConfig.continuous_decoding_config)
  return _internal_continuous_decoding_config();
}
inline void Request_DecodeConfig::_internal_set_continuous_decoding_config(bool value) {
  
  continuous_decoding_config_ = value;
}
inline void Request_DecodeConfig::set_continuous_decoding_config(bool value) {
  _internal_set_continuous_decoding_config(value);
  // @@protoc_insertion_point(field_set:wenet.Request.DecodeConfig.continuous_decoding_config)
}

// -------------------------------------------------------------------

// Request

// .wenet.Request.DecodeConfig decode_config = 1;
inline bool Request::_internal_has_decode_config() const {
  return RequestPayload_case() == kDecodeConfig;
}
inline bool Request::has_decode_config() const {
  return _internal_has_decode_config();
}
inline void Request::set_has_decode_config() {
  _oneof_case_[0] = kDecodeConfig;
}
inline void Request::clear_decode_config() {
  if (_internal_has_decode_config()) {
    if (GetArena() == nullptr) {
      delete RequestPayload_.decode_config_;
    }
    clear_has_RequestPayload();
  }
}
inline ::wenet::Request_DecodeConfig* Request::release_decode_config() {
  // @@protoc_insertion_point(field_release:wenet.Request.decode_config)
  if (_internal_has_decode_config()) {
    clear_has_RequestPayload();
      ::wenet::Request_DecodeConfig* temp = RequestPayload_.decode_config_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    RequestPayload_.decode_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::wenet::Request_DecodeConfig& Request::_internal_decode_config() const {
  return _internal_has_decode_config()
      ? *RequestPayload_.decode_config_
      : reinterpret_cast< ::wenet::Request_DecodeConfig&>(::wenet::_Request_DecodeConfig_default_instance_);
}
inline const ::wenet::Request_DecodeConfig& Request::decode_config() const {
  // @@protoc_insertion_point(field_get:wenet.Request.decode_config)
  return _internal_decode_config();
}
inline ::wenet::Request_DecodeConfig* Request::unsafe_arena_release_decode_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:wenet.Request.decode_config)
  if (_internal_has_decode_config()) {
    clear_has_RequestPayload();
    ::wenet::Request_DecodeConfig* temp = RequestPayload_.decode_config_;
    RequestPayload_.decode_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_decode_config(::wenet::Request_DecodeConfig* decode_config) {
  clear_RequestPayload();
  if (decode_config) {
    set_has_decode_config();
    RequestPayload_.decode_config_ = decode_config;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wenet.Request.decode_config)
}
inline ::wenet::Request_DecodeConfig* Request::_internal_mutable_decode_config() {
  if (!_internal_has_decode_config()) {
    clear_RequestPayload();
    set_has_decode_config();
    RequestPayload_.decode_config_ = CreateMaybeMessage< ::wenet::Request_DecodeConfig >(GetArena());
  }
  return RequestPayload_.decode_config_;
}
inline ::wenet::Request_DecodeConfig* Request::mutable_decode_config() {
  // @@protoc_insertion_point(field_mutable:wenet.Request.decode_config)
  return _internal_mutable_decode_config();
}

// bytes audio_data = 2;
inline bool Request::_internal_has_audio_data() const {
  return RequestPayload_case() == kAudioData;
}
inline bool Request::has_audio_data() const {
  return _internal_has_audio_data();
}
inline void Request::set_has_audio_data() {
  _oneof_case_[0] = kAudioData;
}
inline void Request::clear_audio_data() {
  if (_internal_has_audio_data()) {
    RequestPayload_.audio_data_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_RequestPayload();
  }
}
inline const std::string& Request::audio_data() const {
  // @@protoc_insertion_point(field_get:wenet.Request.audio_data)
  return _internal_audio_data();
}
inline void Request::set_audio_data(const std::string& value) {
  _internal_set_audio_data(value);
  // @@protoc_insertion_point(field_set:wenet.Request.audio_data)
}
inline std::string* Request::mutable_audio_data() {
  // @@protoc_insertion_point(field_mutable:wenet.Request.audio_data)
  return _internal_mutable_audio_data();
}
inline const std::string& Request::_internal_audio_data() const {
  if (_internal_has_audio_data()) {
    return RequestPayload_.audio_data_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Request::_internal_set_audio_data(const std::string& value) {
  if (!_internal_has_audio_data()) {
    clear_RequestPayload();
    set_has_audio_data();
    RequestPayload_.audio_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  RequestPayload_.audio_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Request::set_audio_data(std::string&& value) {
  // @@protoc_insertion_point(field_set:wenet.Request.audio_data)
  if (!_internal_has_audio_data()) {
    clear_RequestPayload();
    set_has_audio_data();
    RequestPayload_.audio_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  RequestPayload_.audio_data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:wenet.Request.audio_data)
}
inline void Request::set_audio_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_audio_data()) {
    clear_RequestPayload();
    set_has_audio_data();
    RequestPayload_.audio_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  RequestPayload_.audio_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:wenet.Request.audio_data)
}
inline void Request::set_audio_data(const void* value,
                             size_t size) {
  if (!_internal_has_audio_data()) {
    clear_RequestPayload();
    set_has_audio_data();
    RequestPayload_.audio_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  RequestPayload_.audio_data_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:wenet.Request.audio_data)
}
inline std::string* Request::_internal_mutable_audio_data() {
  if (!_internal_has_audio_data()) {
    clear_RequestPayload();
    set_has_audio_data();
    RequestPayload_.audio_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return RequestPayload_.audio_data_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Request::release_audio_data() {
  // @@protoc_insertion_point(field_release:wenet.Request.audio_data)
  if (_internal_has_audio_data()) {
    clear_has_RequestPayload();
    return RequestPayload_.audio_data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void Request::set_allocated_audio_data(std::string* audio_data) {
  if (has_RequestPayload()) {
    clear_RequestPayload();
  }
  if (audio_data != nullptr) {
    set_has_audio_data();
    RequestPayload_.audio_data_.UnsafeSetDefault(audio_data);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(audio_data);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:wenet.Request.audio_data)
}

inline bool Request::has_RequestPayload() const {
  return RequestPayload_case() != REQUESTPAYLOAD_NOT_SET;
}
inline void Request::clear_has_RequestPayload() {
  _oneof_case_[0] = REQUESTPAYLOAD_NOT_SET;
}
inline Request::RequestPayloadCase Request::RequestPayload_case() const {
  return Request::RequestPayloadCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Response_OneBest

// string sentence = 1;
inline void Response_OneBest::clear_sentence() {
  sentence_.ClearToEmpty();
}
inline const std::string& Response_OneBest::sentence() const {
  // @@protoc_insertion_point(field_get:wenet.Response.OneBest.sentence)
  return _internal_sentence();
}
inline void Response_OneBest::set_sentence(const std::string& value) {
  _internal_set_sentence(value);
  // @@protoc_insertion_point(field_set:wenet.Response.OneBest.sentence)
}
inline std::string* Response_OneBest::mutable_sentence() {
  // @@protoc_insertion_point(field_mutable:wenet.Response.OneBest.sentence)
  return _internal_mutable_sentence();
}
inline const std::string& Response_OneBest::_internal_sentence() const {
  return sentence_.Get();
}
inline void Response_OneBest::_internal_set_sentence(const std::string& value) {
  
  sentence_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Response_OneBest::set_sentence(std::string&& value) {
  
  sentence_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:wenet.Response.OneBest.sentence)
}
inline void Response_OneBest::set_sentence(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sentence_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:wenet.Response.OneBest.sentence)
}
inline void Response_OneBest::set_sentence(const char* value,
    size_t size) {
  
  sentence_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:wenet.Response.OneBest.sentence)
}
inline std::string* Response_OneBest::_internal_mutable_sentence() {
  
  return sentence_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Response_OneBest::release_sentence() {
  // @@protoc_insertion_point(field_release:wenet.Response.OneBest.sentence)
  return sentence_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Response_OneBest::set_allocated_sentence(std::string* sentence) {
  if (sentence != nullptr) {
    
  } else {
    
  }
  sentence_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sentence,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:wenet.Response.OneBest.sentence)
}

// repeated .wenet.Response.OnePiece wordpieces = 2;
inline int Response_OneBest::_internal_wordpieces_size() const {
  return wordpieces_.size();
}
inline int Response_OneBest::wordpieces_size() const {
  return _internal_wordpieces_size();
}
inline void Response_OneBest::clear_wordpieces() {
  wordpieces_.Clear();
}
inline ::wenet::Response_OnePiece* Response_OneBest::mutable_wordpieces(int index) {
  // @@protoc_insertion_point(field_mutable:wenet.Response.OneBest.wordpieces)
  return wordpieces_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wenet::Response_OnePiece >*
Response_OneBest::mutable_wordpieces() {
  // @@protoc_insertion_point(field_mutable_list:wenet.Response.OneBest.wordpieces)
  return &wordpieces_;
}
inline const ::wenet::Response_OnePiece& Response_OneBest::_internal_wordpieces(int index) const {
  return wordpieces_.Get(index);
}
inline const ::wenet::Response_OnePiece& Response_OneBest::wordpieces(int index) const {
  // @@protoc_insertion_point(field_get:wenet.Response.OneBest.wordpieces)
  return _internal_wordpieces(index);
}
inline ::wenet::Response_OnePiece* Response_OneBest::_internal_add_wordpieces() {
  return wordpieces_.Add();
}
inline ::wenet::Response_OnePiece* Response_OneBest::add_wordpieces() {
  // @@protoc_insertion_point(field_add:wenet.Response.OneBest.wordpieces)
  return _internal_add_wordpieces();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wenet::Response_OnePiece >&
Response_OneBest::wordpieces() const {
  // @@protoc_insertion_point(field_list:wenet.Response.OneBest.wordpieces)
  return wordpieces_;
}

// -------------------------------------------------------------------

// Response_OnePiece

// string word = 1;
inline void Response_OnePiece::clear_word() {
  word_.ClearToEmpty();
}
inline const std::string& Response_OnePiece::word() const {
  // @@protoc_insertion_point(field_get:wenet.Response.OnePiece.word)
  return _internal_word();
}
inline void Response_OnePiece::set_word(const std::string& value) {
  _internal_set_word(value);
  // @@protoc_insertion_point(field_set:wenet.Response.OnePiece.word)
}
inline std::string* Response_OnePiece::mutable_word() {
  // @@protoc_insertion_point(field_mutable:wenet.Response.OnePiece.word)
  return _internal_mutable_word();
}
inline const std::string& Response_OnePiece::_internal_word() const {
  return word_.Get();
}
inline void Response_OnePiece::_internal_set_word(const std::string& value) {
  
  word_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Response_OnePiece::set_word(std::string&& value) {
  
  word_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:wenet.Response.OnePiece.word)
}
inline void Response_OnePiece::set_word(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  word_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:wenet.Response.OnePiece.word)
}
inline void Response_OnePiece::set_word(const char* value,
    size_t size) {
  
  word_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:wenet.Response.OnePiece.word)
}
inline std::string* Response_OnePiece::_internal_mutable_word() {
  
  return word_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Response_OnePiece::release_word() {
  // @@protoc_insertion_point(field_release:wenet.Response.OnePiece.word)
  return word_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Response_OnePiece::set_allocated_word(std::string* word) {
  if (word != nullptr) {
    
  } else {
    
  }
  word_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), word,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:wenet.Response.OnePiece.word)
}

// int32 start = 2;
inline void Response_OnePiece::clear_start() {
  start_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Response_OnePiece::_internal_start() const {
  return start_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Response_OnePiece::start() const {
  // @@protoc_insertion_point(field_get:wenet.Response.OnePiece.start)
  return _internal_start();
}
inline void Response_OnePiece::_internal_set_start(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  start_ = value;
}
inline void Response_OnePiece::set_start(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:wenet.Response.OnePiece.start)
}

// int32 end = 3;
inline void Response_OnePiece::clear_end() {
  end_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Response_OnePiece::_internal_end() const {
  return end_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Response_OnePiece::end() const {
  // @@protoc_insertion_point(field_get:wenet.Response.OnePiece.end)
  return _internal_end();
}
inline void Response_OnePiece::_internal_set_end(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  end_ = value;
}
inline void Response_OnePiece::set_end(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_end(value);
  // @@protoc_insertion_point(field_set:wenet.Response.OnePiece.end)
}

// -------------------------------------------------------------------

// Response

// .wenet.Response.Status status = 1;
inline void Response::clear_status() {
  status_ = 0;
}
inline ::wenet::Response_Status Response::_internal_status() const {
  return static_cast< ::wenet::Response_Status >(status_);
}
inline ::wenet::Response_Status Response::status() const {
  // @@protoc_insertion_point(field_get:wenet.Response.status)
  return _internal_status();
}
inline void Response::_internal_set_status(::wenet::Response_Status value) {
  
  status_ = value;
}
inline void Response::set_status(::wenet::Response_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:wenet.Response.status)
}

// .wenet.Response.Type type = 2;
inline void Response::clear_type() {
  type_ = 0;
}
inline ::wenet::Response_Type Response::_internal_type() const {
  return static_cast< ::wenet::Response_Type >(type_);
}
inline ::wenet::Response_Type Response::type() const {
  // @@protoc_insertion_point(field_get:wenet.Response.type)
  return _internal_type();
}
inline void Response::_internal_set_type(::wenet::Response_Type value) {
  
  type_ = value;
}
inline void Response::set_type(::wenet::Response_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:wenet.Response.type)
}

// repeated .wenet.Response.OneBest nbest = 3;
inline int Response::_internal_nbest_size() const {
  return nbest_.size();
}
inline int Response::nbest_size() const {
  return _internal_nbest_size();
}
inline void Response::clear_nbest() {
  nbest_.Clear();
}
inline ::wenet::Response_OneBest* Response::mutable_nbest(int index) {
  // @@protoc_insertion_point(field_mutable:wenet.Response.nbest)
  return nbest_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wenet::Response_OneBest >*
Response::mutable_nbest() {
  // @@protoc_insertion_point(field_mutable_list:wenet.Response.nbest)
  return &nbest_;
}
inline const ::wenet::Response_OneBest& Response::_internal_nbest(int index) const {
  return nbest_.Get(index);
}
inline const ::wenet::Response_OneBest& Response::nbest(int index) const {
  // @@protoc_insertion_point(field_get:wenet.Response.nbest)
  return _internal_nbest(index);
}
inline ::wenet::Response_OneBest* Response::_internal_add_nbest() {
  return nbest_.Add();
}
inline ::wenet::Response_OneBest* Response::add_nbest() {
  // @@protoc_insertion_point(field_add:wenet.Response.nbest)
  return _internal_add_nbest();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wenet::Response_OneBest >&
Response::nbest() const {
  // @@protoc_insertion_point(field_list:wenet.Response.nbest)
  return nbest_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace wenet

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::wenet::Response_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::wenet::Response_Status>() {
  return ::wenet::Response_Status_descriptor();
}
template <> struct is_proto_enum< ::wenet::Response_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::wenet::Response_Type>() {
  return ::wenet::Response_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_wenet_2eproto
